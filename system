#!/usr/bin/env python3

import os
import sys
import json
import yaml
import click
import fasteners
import subprocess

from urllib.request import urlopen


@click.group("cli")
def cli():
    """Manage system operations using the system utility on blendOS."""


def main():
    cli(prog_name="system")


@cli.command("install")
@click.argument('pkgs', nargs=-1, required=True)
def install(pkgs):
    '''
    Install custom system packages.
    '''

    if os.geteuid() != 0:
        print('e: must be run as root', file=sys.stderr)
        exit(1)

    pkgs = list(pkgs)

    orig_pkgs = []

    subprocess.run(['touch', '/.custom_pkg_list'])
    with open('/.custom_pkg_list') as custompkglist_file:
        while line := custompkglist_file.readline():
            if line.strip() != '':
                orig_pkgs.append(line.strip())

    subprocess.run(['akshara', 'set-custom-packages', *orig_pkgs, *pkgs])


@cli.command("remove")
@click.argument('pkgs', nargs=-1, required=True)
def remove_host(pkgs):
    '''
    Remove custom system packages.
    '''

    if os.geteuid() != 0:
        print('e: must be run as root', file=sys.stderr)
        exit(1)

    orig_pkgs = []

    pkgs = list(pkgs)

    subprocess.run(['touch', '/.custom_pkg_list'])
    with open('/.custom_pkg_list') as custompkglist_file:
        while line := custompkglist_file.readline():
            if line.strip() != '':
                if line.strip() not in orig_pkgs:
                    orig_pkgs.append(line.strip())

    for pkg in pkgs:
        if pkg not in orig_pkgs:
            print(f'w: {pkg} not installed, so not removing.')
            print()
        else:
            orig_pkgs.remove(pkg)

    if len(orig_pkgs) == 0:
        subprocess.run(['akshara', 'drop-overlay'])
    else:
        subprocess.run(['akshara', 'set-custom-packages', *orig_pkgs])


@cli.command("track")
def switch_track():
    '''
    Switch to a different OS track.
    '''

    if os.geteuid() != 0:
        print('e: must be run as root', file=sys.stderr)
        exit(1)

    system_lock = fasteners.InterProcessLock('/var/lib/.akshara-system-lock')
    print('i: attempting to acquire system lock')

    with system_lock:
        print()
        if os.path.isfile('/mnt/iso-update/.ready-for-update'):
            print(
                'e: you must reboot first. (an update was downloaded in the background)')
            exit(1)

        image_server = 'https://images.blendos.co'

        if os.path.isfile('/etc/blend_release'):
            with open('/etc/blend_release') as f:
                blend_release = yaml.safe_load(f)
                image_server = blend_release['server']
                curr_track = blend_release['track']

        tracks = json.loads(
            urlopen(image_server + '/track/list').read().decode())['tracks']

        selected_track_name = ''

        print('Available build profiles:')
        print()
        for i, p in enumerate(tracks):
            print(f'{i}. {p}')
        print()
        while True:
            selection = input(
                f'Select a profile [example: 0 or {tracks[0]} for {tracks[0]}]: ').strip()
            if selection == '':
                if tracks[0] == curr_track:
                    print(
                        f'The selected track is already in use. ({curr_track})')
                    print()
                    continue
                selected_track_name = tracks[0]
                print()
                break
            elif selection.isdigit():
                if int(selection) < len(tracks):
                    if tracks[int(selection)] == curr_track:
                        print(
                            f'The selected track is already in use. ({curr_track})')
                        print()
                        continue
                    else:
                        selected_track_name = tracks[int(selection)]
                        print()
                    break
                else:
                    print('No such track exists.')
                    print()
            else:
                if selection in tracks:
                    if selection == curr_track:
                        print(
                            f'The selected track is already in use. ({curr_track})')
                        print()
                        continue
                    selected_track_name = selection
                    print()
                    break
                else:
                    print('No such track exists.')
                    print()

        print(f'Switching to {selected_track_name}.')

        with open('/etc/blend_release', 'w') as f:
            release = {
                'server': image_server,
                'track': selected_track_name,
                'current': 0,
            }
            yaml.dump(release, f)

        print()
        print('The track switch will commence within a minute, and the logs will be visible here. Do not turn off your computer.')
        print()

    subprocess.run(['bash', '-c', 'journalctl -S -0 -u akshara -f & while true; do test -f /mnt/iso-update/.ready-for-update && exit; done'],
                   stdout=sys.stdout, stderr=sys.stderr)

    print()
    print('Track switch complete. You may now reboot.')


@cli.command('build')
@click.argument('profile_name', nargs=1, required=True)
def build_iso(profile_name):
    '''
    Build an ISO of a standard blendOS variant like `gnome' or `plasma'.
    '''

    if os.geteuid() != 0:
        print('e: must be run as root')
        exit(1)

    if os.path.isdir('/tmp/blend-build-out'):
        subprocess.run(['rm', '-rf', '/tmp/blend-build-out'])

    subprocess.run(
        ['bash', '-c', '''echo 'pacman -Syu --noconfirm python-click python-yaml python-psutil grub squashfs-tools base-devel archiso sudo git; TEMP_ASSEMBLE_DIR="$(mktemp -d)"; git clone https://github.com/blend-os/assemble "${TEMP_ASSEMBLE_DIR}/assemble"; sudo cp "${TEMP_ASSEMBLE_DIR}/assemble/assemble" /usr/local/bin; rm -rf "${TEMP_ASSEMBLE_DIR}"; useradd -m blend; echo -e "\nblend ALL=(ALL) NOPASSWD:ALL" | tee -a /etc/sudoers; mkdir blend-iso; chown blend blend-iso; sudo -u blend bash -c "cd blend-iso; assemble init https://github.com/blend-os/manifests main; assemble sync; source build/envsetup.sh; breakfast; sudo brunch ''' + profile_name + '''; cp -r out /tmp/blend-build-out"' | sudo podman run --rm -v /tmp:/tmp -i --privileged archlinux:latest'''])

    iso_path = 'non-existent'

    if os.path.isdir(f'/tmp/blend-build-out/{profile_name}'):
        for _dir in os.listdir(f'/tmp/blend-build-out/{profile_name}'):
            if os.path.isdir(f'/tmp/blend-build-out/{profile_name}/{_dir}'):
                for file in os.listdir(f'/tmp/blend-build-out/{profile_name}/{_dir}'):
                    if file.endswith('.iso'):
                        iso_path = f'/tmp/blend-build-out/{profile_name}/{_dir}/{file}'
                        break

    if iso_path == 'non-existent':
        print('e: the ISO build failed')
        exit(1)
    else:
        subprocess.run(['cp', iso_path, 'blendOS.iso'])
        print('The ISO has been built successfully, and is named `blendOS.iso\' in the current directory.')


def build_custom(profile_name, profile_packages):
    '''
    Build an Apex ISO.
    '''

    if os.geteuid() != 0:
        print('e: must be run as root')
        exit(1)

    if os.path.isdir('/tmp/blend-build-out'):
        subprocess.run(['rm', '-rf', '/tmp/blend-build-out'])

    subprocess.run(
        ['bash', '-c', '''echo 'pacman -Syu --noconfirm python-click python-yaml python-psutil grub squashfs-tools base-devel archiso sudo git; TEMP_ASSEMBLE_DIR="$(mktemp -d)"; git clone https://github.com/blend-os/assemble "${TEMP_ASSEMBLE_DIR}/assemble"; sudo cp "${TEMP_ASSEMBLE_DIR}/assemble/assemble" /usr/local/bin; rm -rf "${TEMP_ASSEMBLE_DIR}"; useradd -m blend; echo -e "\nblend ALL=(ALL) NOPASSWD:ALL" | tee -a /etc/sudoers; mkdir blend-iso; chown blend blend-iso; sudo -u blend bash -c "cd blend-iso; assemble init https://github.com/blend-os/manifests main; assemble sync; source build/envsetup.sh; breakfast; sudo custom-brunch ''' + profile_name + ' ' + ' '.join(profile_packages) + '''; cp -r out /tmp/blend-build-out"' | sudo podman run --rm -v /tmp:/tmp -i --privileged archlinux:latest'''])

    iso_path = 'non-existent'

    if os.path.isdir(f'/tmp/blend-build-out/{profile_name}'):
        for _dir in os.listdir(f'/tmp/blend-build-out/{profile_name}'):
            if os.path.isdir(f'/tmp/blend-build-out/{profile_name}/{_dir}'):
                for file in os.listdir(f'/tmp/blend-build-out/{profile_name}/{_dir}'):
                    if file.endswith('.iso'):
                        iso_path = f'/tmp/blend-build-out/{profile_name}/{_dir}/{file}'
                        break

    if iso_path == 'non-existent':
        print('e: the ISO build failed')
        exit(1)
    else:
        subprocess.run(['cp', iso_path, 'blendOS.iso'])
        print('The ISO has been built successfully, and is named `blendOS.iso\' in the current directory.')


@cli.command('build-apex')
@click.argument('profile_name', nargs=1, required=True)
@click.argument('profile_packages', nargs=-1, required=True)
def build_apex(profile_name, profile_packages):
    build_custom(profile_name, profile_packages)


@cli.command('apex-update')
def update_apex():
    if os.geteuid() != 0:
        print('e: must be run as root', file=sys.stderr)
        exit(1)

    if input('would you like to edit the base package list? [y/n; default: n] ').lower() == 'y':
        subprocess.run(['nano', '/.base_packages'])
    with open('/etc/blend_release') as blend_release_file:
        track = yaml.load(blend_release_file, Loader=yaml.FullLoader)['track']
    pkgs = []
    subprocess.run(['touch', '/.base_packages'])
    with open('/.base_packages') as base_packages_file:
        for pkg in base_packages_file:
            if pkg.strip() != '':
                pkgs.append(pkg)
    print('i: starting new ISO build')
    build_custom(track, pkgs)
    print()
    print('i: starting update')
    subprocess.run(['akshara', 'apex-update', 'blendOS.iso'])

if __name__ == '__main__':
    main()
